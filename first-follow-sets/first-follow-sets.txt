private TokenType[][] PROGRAM = {
	{ TokenType.INT, TokenType.VOID },
	{ TokenType.EOF }
};
private TokenType[][] DECLARATION_LIST = {
	{ TokenType.INT, TokenType.VOID },
	{ TokenType.EOF }
};
private TokenType[][] DECLARATION = {
	{ TokenType.INT, TokenType.VOID },
	{ TokenType.INT, TokenType.VOID, TokenType.EOF }
};
private TokenType[][] DECLARATION_PRIME = {
	{ TokenType.OPEN_PAREN, TokenType.OPEN_BRACKET, TokenType.END_STATEMENT },
	{ TokenType.INT, TokenType.VOID, TokenType.EOF }
};
private TokenType[][] VAR_DECLARATION = {
	{ TokenType.INT },
	{ TokenType.INT, TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.CLOSE_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.EPSILON }
};
private TokenType[][] VAR_DECLARATION_PRIME = {
	{ TokenType.OPEN_BRACKET, TokenType.END_STATEMENT },
	{ TokenType.INT, TokenType.VOID, TokenType.EOF }
};
private TokenType[][] FUN_DECLARATION_PRIME = {
	{ TokenType.OPEN_PAREN },
	{ TokenType.INT, TokenType.VOID, TokenType.EOF }
};
private TokenType[][] PARAMS = {
	{ TokenType.INT, TokenType.VOID },
	{ TokenType.CLOSE_PAREN }
};
private TokenType[][] PARAM_LIST = {
	{ TokenType.INT },
	{ TokenType.CLOSE_PAREN }
};
private TokenType[][] PARAM = {
	{ TokenType.INT },
	{ TokenType.COMMA, TokenType.CLOSE_PAREN }
};
private TokenType[][] COMPOUND_STMT = {
	{ TokenType.OPEN_CBRACE },
	{ TokenType.INT, TokenType.VOID, TokenType.EOF, TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] LOCAL_DECLARATIONS = {
	{ TokenType.INT, TokenType.EPSILON },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.CLOSE_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.EPSILON }
};
private TokenType[][] STATEMENT_LIST = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.EPSILON },
	{ TokenType.CLOSE_CBRACE }
};
private TokenType[][] STATEMENT = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] EXPRESSION_STMT = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] SELECTION_STMT = {
	{ TokenType.IF },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] ITERATION_STMT = {
	{ TokenType.WHILE },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] RETURN_STMT = {
	{ TokenType.RETURN },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_CBRACE, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.ELSE, TokenType.CLOSE_CBRACE }
};
private TokenType[][] EXPRESSION = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID },
	{ TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] EXPRESSION_PRIME = {
	{ TokenType. ASSIGNMENT, TokenType.OPEN_PAREN, TokenType.OPEN_BRACKET, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON },
	{ TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] EXPRESSION_PRIME_PRIME = {
	{ TokenType. ASSIGNMENT, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON },
	{ TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] VAR = {
	{ TokenType.OPEN_BRACKET, TokenType.EPSILON },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] SIMPLE_EXPRESSION_PRIME = {
	{ TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON },
	{ TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] RELOP = {
	{ TokenType.LESS_EQUAL_THAN, TokenType.LESS_THAN, TokenType.GREATER_THAN, TokenType.GREATER_EQUAL_THAN, TokenType.EQUALS, TokenType.NOT_EQUALS },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID }
};
private TokenType[][] ADDITIVE_EXPRESSION = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID },
	{ TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] ADDITIVE_EXPRESSION_PRIME = {
	{ TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.LESS_EQUAL_THAN, TokenType.LESS_THAN, TokenType.GREATER_THAN, TokenType.GREATER_EQUAL_THAN, TokenType.EQUALS, TokenType.NOT_EQUALS, TokenType.EPSILON },
	{ TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] ADDOP = {
	{ TokenType.PLUS, TokenType.MINUS },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID }
};
private TokenType[][] TERM = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] TERM_PRIME = {
	{ TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] MULOP = {
	{ TokenType.MULTIPLY, TokenType.DIVIDE },
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID }
};
private TokenType[][] FACTOR = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] VARCALL = {
	{ TokenType.EPSILON, TokenType.OPEN_BRACKET, TokenType.OPEN_PAREN },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] CALL = {
	{ TokenType.OPEN_PAREN },
	{ TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.END_STATEMENT, TokenType.COMMA, TokenType.CLOSE_PAREN, TokenType.CLOSE_BRACKET, TokenType.CLOSE_PAREN }
};
private TokenType[][] ARGS = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.EPSILON },
	{ TokenType.CLOSE_PAREN }
};
private TokenType[][] ARG_LIST = {
	{ TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID },
	{ TokenType.CLOSE_PAREN }
};
