private TokenType[] PROGRAM = { TokenType.INT, TokenType.VOID };
private TokenType[] DECLARATION_LIST = { TokenType.INT, TokenType.VOID };
private TokenType[] DECLARATION = { TokenType.INT, TokenType.VOID };
private TokenType[] DECLARATION_PRIME = { TokenType.OPEN_PAREN, TokenType.OPEN_BRACE, TokenType.END_STATEMENT };
private TokenType[] VAR_DECLARATION = { TokenType.INT };
private TokenType[] VAR_DECLARATION_PRIME = { TokenType.OPEN_BRACE, TokenType.END_STATEMENT };
private TokenType[] FUN_DECLARATION_PRIME = { TokenType.OPEN_PAREN };
private TokenType[] PARAMS = { TokenType.INT, TokenType.VOID };
private TokenType[] PARAM_LIST = { TokenType.INT };
private TokenType[] PARAM = { TokenType.INT };
private TokenType[] COMPOUND_STMT = { TokenType.OPEN_BRACKET };
private TokenType[] LOCAL_DECLARATIONS = { TokenType.INT, TokenType.EPSILON };
private TokenType[] STATEMENT_LIST = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_BRACKET, TokenType.IF, TokenType.WHILE, TokenType.RETURN, TokenType.EPSILON };
private TokenType[] STATEMENT = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT, TokenType.OPEN_BRACKET, TokenType.IF, TokenType.WHILE, TokenType.RETURN };
private TokenType[] EXPRESSION_STMT = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.END_STATEMENT };
private TokenType[] SELECTION_STMT = { TokenType.IF };
private TokenType[] ITERATION_STMT = { TokenType.WHILE };
private TokenType[] RETURN_STMT = { TokenType.RETURN };
private TokenType[] EXPRESSION = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID };
private TokenType[] EXPRESSION_PRIME = { TokenType. ASSIGNMENT, TokenType.OPEN_PAREN, TokenType.OPEN_BRACE, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON };
private TokenType[] EXPRESSION_PRIME_PRIME = { TokenType. ASSIGNMENT, TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON };
private TokenType[] VAR = { TokenType.OPEN_BRACE, TokenType.EPSILON };
private TokenType[] SIMPLE_EXPRESSION_PRIME = { TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON };
private TokenType[] RELOP = { TokenType.LESS_EQUAL_THAN, TokenType.LESS_THAN, TokenType.GREATER_THAN, TokenType.GREATER_EQUAL_THAN, TokenType.EQUALS, TokenType.NOT_EQUALS };
private TokenType[] ADDITIVE_EXPRESSION = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID };
private TokenType[] ADDITIVE_EXPRESSION_PRIME = { TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.LESS_EQUAL_THAN, TokenType.LESS_THAN, TokenType.GREATER_THAN, TokenType.GREATER_EQUAL_THAN, TokenType.EQUALS, TokenType.NOT_EQUALS, TokenType.EPSILON };
private TokenType[] ADDOP = { TokenType.PLUS, TokenType.MINUS };
private TokenType[] TERM = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID };
private TokenType[] TERM_PRIME = { TokenType.MULTIPLY, TokenType.DIVIDE, TokenType.EPSILON };
private TokenType[] MULOP = { TokenType.MULTIPLY, TokenType.DIVIDE };
private TokenType[] FACTOR = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID };
private TokenType[] VARCALL = { TokenType.EPSILON, TokenType.OPEN_BRACE, TokenType.OPEN_PAREN };
private TokenType[] CALL = { TokenType.OPEN_PAREN };
private TokenType[] ARGS = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID, TokenType.EPSILON };
private TokenType[] ARG_LIST = { TokenType.OPEN_PAREN, TokenType.NUM, TokenType.ID };
